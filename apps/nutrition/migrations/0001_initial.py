# Generated by Django 4.2.7 on 2025-10-15 21:49

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, max_length=15)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1)),
                ('location', models.CharField(blank=True, max_length=100)),
                ('height', models.DecimalField(blank=True, decimal_places=2, help_text='Height in cm', max_digits=5, null=True)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Weight in kg', max_digits=5, null=True)),
                ('activity_level', models.CharField(choices=[('sedentary', 'Sedentary (little or no exercise)'), ('light', 'Light (exercise 1-3 days/week)'), ('moderate', 'Moderate (exercise 3-5 days/week)'), ('active', 'Active (exercise 6-7 days/week)'), ('very_active', 'Very Active (physical job or training twice per day)')], default='moderate', max_length=20)),
                ('health_goal', models.CharField(choices=[('lose_weight', 'Lose Weight'), ('maintain', 'Maintain Weight'), ('gain_weight', 'Gain Weight'), ('muscle_gain', 'Build Muscle'), ('general_health', 'General Health')], default='general_health', max_length=20)),
                ('is_vegetarian', models.BooleanField(default=False)),
                ('is_vegan', models.BooleanField(default=False)),
                ('is_halal', models.BooleanField(default=True)),
                ('daily_budget', models.DecimalField(blank=True, decimal_places=2, help_text='Daily food budget in Naira', max_digits=10, null=True)),
                ('has_diabetes', models.BooleanField(default=False)),
                ('has_hypertension', models.BooleanField(default=False)),
                ('allergies', models.TextField(blank=True, help_text='Comma-separated list of allergies')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Food',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('local_name', models.CharField(blank=True, help_text='Name in local language', max_length=200)),
                ('description', models.TextField(blank=True)),
                ('calories', models.DecimalField(decimal_places=2, max_digits=6)),
                ('protein', models.DecimalField(decimal_places=2, help_text='Grams per 100g', max_digits=5)),
                ('carbohydrates', models.DecimalField(decimal_places=2, help_text='Grams per 100g', max_digits=5)),
                ('fats', models.DecimalField(decimal_places=2, help_text='Grams per 100g', max_digits=5)),
                ('fiber', models.DecimalField(decimal_places=2, default=0, help_text='Grams per 100g', max_digits=5)),
                ('iron', models.DecimalField(blank=True, decimal_places=2, help_text='mg per 100g', max_digits=5, null=True)),
                ('calcium', models.DecimalField(blank=True, decimal_places=2, help_text='mg per 100g', max_digits=5, null=True)),
                ('vitamin_a', models.DecimalField(blank=True, decimal_places=2, help_text='mcg per 100g', max_digits=5, null=True)),
                ('is_seasonal', models.BooleanField(default=False)),
                ('available_months', models.CharField(blank=True, help_text='e.g., Jan,Feb,Mar', max_length=100)),
                ('average_price_per_kg', models.DecimalField(decimal_places=2, help_text='Price in Naira', max_digits=10)),
                ('is_vegetarian', models.BooleanField(default=False)),
                ('is_vegan', models.BooleanField(default=False)),
                ('is_halal', models.BooleanField(default=True)),
                ('is_gluten_free', models.BooleanField(default=True)),
                ('suitable_for_diabetes', models.BooleanField(default=True)),
                ('suitable_for_hypertension', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='FoodCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'verbose_name_plural': 'Food Categories',
            },
        ),
        migrations.CreateModel(
            name='HealthTip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('category', models.CharField(max_length=100)),
                ('relevant_for_diabetes', models.BooleanField(default=False)),
                ('relevant_for_hypertension', models.BooleanField(default=False)),
                ('relevant_for_weight_loss', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('local_name', models.CharField(blank=True, max_length=200)),
                ('description', models.TextField()),
                ('meal_type', models.CharField(choices=[('breakfast', 'Breakfast'), ('lunch', 'Lunch'), ('dinner', 'Dinner'), ('snack', 'Snack')], max_length=20)),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=10)),
                ('prep_time', models.IntegerField(help_text='Preparation time in minutes')),
                ('cook_time', models.IntegerField(help_text='Cooking time in minutes')),
                ('servings', models.IntegerField(default=4)),
                ('instructions', models.TextField(help_text='Step-by-step cooking instructions')),
                ('estimated_cost', models.DecimalField(decimal_places=2, help_text='Total cost in Naira', max_digits=10)),
                ('total_calories', models.DecimalField(decimal_places=2, max_digits=8)),
                ('total_protein', models.DecimalField(decimal_places=2, max_digits=6)),
                ('total_carbs', models.DecimalField(decimal_places=2, max_digits=6)),
                ('total_fats', models.DecimalField(decimal_places=2, max_digits=6)),
                ('image_url', models.URLField(blank=True)),
                ('is_vegetarian', models.BooleanField(default=False)),
                ('is_vegan', models.BooleanField(default=False)),
                ('is_halal', models.BooleanField(default=True)),
                ('rating', models.DecimalField(decimal_places=2, default=0, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('times_made', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserMealLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meal_type', models.CharField(choices=[('breakfast', 'Breakfast'), ('lunch', 'Lunch'), ('dinner', 'Dinner'), ('snack', 'Snack')], max_length=20)),
                ('date', models.DateField()),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('recipe', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='nutrition.recipe')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meal_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RecipeIngredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=2, help_text='Quantity in grams', max_digits=6)),
                ('notes', models.CharField(blank=True, help_text="e.g., 'chopped', 'diced'", max_length=200)),
                ('food', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nutrition.food')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ingredients', to='nutrition.recipe')),
            ],
        ),
        migrations.AddField(
            model_name='food',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='foods', to='nutrition.foodcategory'),
        ),
        migrations.CreateModel(
            name='MealPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('total_calories', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('total_cost', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('is_followed', models.BooleanField(default=False, help_text='Did user follow this plan?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('breakfast', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='breakfast_plans', to='nutrition.recipe')),
                ('dinner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dinner_plans', to='nutrition.recipe')),
                ('lunch', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lunch_plans', to='nutrition.recipe')),
                ('snacks', models.ManyToManyField(blank=True, related_name='snack_plans', to='nutrition.recipe')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meal_plans', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('user', 'date')},
            },
        ),
    ]
